{
  "title": "Algebra 1 - Functions: SAT Module 2 Style Problems",
  "target_grade": "Grade 6 transitioning to Algebra 1",
  "design_principles": {
    "problem_length": "SAT Module 2 level with 3-5 sentence contexts",
    "scaffolding": "Progressive increase from 2 to 11 steps",
    "concept_grouping": "Linear concepts first, nonlinear later",
    "real_world_focus": "Authentic situations with concrete data"
  },
  "problems": [
    {
      "number": 1,
      "act": "Act 1: 대응의 발견",
      "title": "학교 급식 시스템",
      "concept": "일대일 대응",
      "problem_context": "서울의 한 중학교에서는 1,200명의 학생에게 급식 카드를 발급합니다. 각 학생은 고유한 6자리 학번을 가지고 있으며, 급식 카드 번호는 학번과 일대일로 대응됩니다. 급식실 입구의 카드 리더기는 카드 번호를 읽어 해당 학생의 급식 여부를 자동으로 기록합니다.",
      "data": {
        "학생_수": 1200,
        "학번_예시": ["230451", "230452", "230453"],
        "카드번호_예시": ["A230451", "A230452", "A230453"]
      },
      "questions": [
        "a) 학번과 급식 카드 번호의 관계가 함수인 이유를 설명하시오.",
        "b) 만약 한 학생이 여러 개의 카드를 가질 수 있다면 이 관계는 함수인가?",
        "c) 카드 번호로부터 학번을 찾는 것도 함수인가?"
      ],
      "scaffolding": [
        "Step 1: 각 학생(입력)은 정확히 하나의 카드 번호(출력)를 받습니다.",
        "Step 2: 같은 학생은 항상 같은 카드 번호를 갖습니다."
      ],
      "answer": {
        "a": "각 학번(입력)이 정확히 하나의 카드 번호(출력)에 대응되므로 함수",
        "b": "아니다. 하나의 입력이 여러 출력을 가지면 함수가 아님",
        "c": "예. 각 카드 번호도 정확히 하나의 학번에 대응"
      },
      "difficulty": "easy",
      "scaffolding_steps": 2
    },
    {
      "number": 2,
      "act": "Act 1: 대응의 발견",
      "title": "온라인 쇼핑몰 배송 시스템",
      "concept": "함수의 일관성",
      "problem_context": "대한민국의 한 온라인 쇼핑몰은 상품 무게에 따라 배송료를 자동 계산합니다. 시스템은 상품 무게(kg)를 입력받아 배송료(원)를 출력합니다. 1kg 이하는 3,000원, 1-3kg는 4,000원, 3-5kg는 5,000원의 배송료가 부과됩니다. 이 규칙은 365일 24시간 동일하게 적용됩니다.",
      "data": {
        "배송료_테이블": {
          "0-1kg": 3000,
          "1-3kg": 4000,
          "3-5kg": 5000
        },
        "주문_예시": [
          {"상품": "책", "무게": 0.5, "배송료": "?"},
          {"상품": "노트북", "무게": 2.5, "배송료": "?"},
          {"상품": "프린터", "무게": 4.2, "배송료": "?"}
        ]
      },
      "questions": [
        "a) 각 주문의 배송료를 계산하시오.",
        "b) 같은 무게의 상품이 다른 날 주문되면 배송료가 달라질까?",
        "c) 이 배송료 시스템이 함수인 이유를 설명하시오."
      ],
      "scaffolding": [
        "Step 1: 무게 구간을 확인합니다.",
        "Step 2: 해당 구간의 배송료를 찾습니다.",
        "Step 3: 같은 무게는 항상 같은 배송료(일관성)."
      ],
      "answer": {
        "a": "책: 3,000원, 노트북: 4,000원, 프린터: 5,000원",
        "b": "아니다. 함수는 일관성을 가짐",
        "c": "각 무게(입력)가 정확히 하나의 배송료(출력)를 결정하고, 항상 일관됨"
      },
      "difficulty": "easy",
      "scaffolding_steps": 3
    },
    {
      "number": 3,
      "act": "Act 1: 대응의 발견",
      "title": "버스 요금 계산 시스템",
      "concept": "정의역과 치역",
      "problem_context": "서울시 버스는 거리에 따라 요금이 결정됩니다. 기본 요금은 10km까지 1,200원이며, 이후 5km마다 100원씩 추가됩니다. 버스 노선의 최대 거리는 40km입니다. 교통카드 시스템은 승차 시 태그한 정류장과 하차 시 태그한 정류장 간의 거리를 자동 계산하여 요금을 부과합니다.",
      "data": {
        "기본_요금": 1200,
        "추가_요금": "5km당 100원",
        "최대_거리": 40,
        "거리별_요금": {
          "0-10km": 1200,
          "10-15km": 1300,
          "15-20km": 1400,
          "20-25km": 1500,
          "25-30km": 1600,
          "30-35km": 1700,
          "35-40km": 1800
        }
      },
      "questions": [
        "a) 이 요금 함수의 정의역(가능한 거리)은?",
        "b) 이 요금 함수의 치역(가능한 요금)은?",
        "c) 23km를 이동한 승객의 요금은?"
      ],
      "scaffolding": [
        "Step 1: 정의역 = 입력 가능한 모든 거리 값",
        "Step 2: 최소 거리 0km, 최대 거리 40km",
        "Step 3: 치역 = 출력 가능한 모든 요금 값",
        "Step 4: 23km는 20-25km 구간에 속함"
      ],
      "answer": {
        "a": "정의역 = [0, 40] (0km 이상 40km 이하)",
        "b": "치역 = {1200, 1300, 1400, 1500, 1600, 1700, 1800}",
        "c": "1,500원"
      },
      "difficulty": "easy",
      "scaffolding_steps": 4
    },
    {
      "number": 4,
      "act": "Act 1: 대응의 발견",
      "title": "스마트폰 데이터 요금제",
      "concept": "구간별 함수",
      "problem_context": "한국의 통신사 A는 월간 데이터 사용량에 따라 요금을 부과합니다. 기본 제공량 5GB까지는 55,000원이고, 5GB 초과 시 1GB당 11,000원이 추가됩니다. 단, 월 최대 요금은 110,000원으로 제한되어 그 이상 사용해도 추가 요금이 없습니다. 회사는 고객의 월간 사용 패턴을 분석하여 평균 7.5GB를 사용한다는 것을 발견했습니다.",
      "data": {
        "기본_제공": "5GB",
        "기본_요금": 55000,
        "초과_요금": "1GB당 11,000원",
        "최대_요금": 110000,
        "사용자_데이터": [
          {"이름": "김철수", "사용량": 3.5, "요금": "?"},
          {"이름": "이영희", "사용량": 7.5, "요금": "?"},
          {"이름": "박민수", "사용량": 12, "요금": "?"}
        ]
      },
      "questions": [
        "a) 각 사용자의 요금을 계산하시오.",
        "b) 요금 함수 f(x)를 구간별로 정의하시오.",
        "c) 이 함수가 모든 점에서 연속인가?"
      ],
      "scaffolding": [
        "Step 1: 5GB 이하인지 초과인지 확인",
        "Step 2: 초과 시 초과분 계산: (사용량 - 5) × 11,000",
        "Step 3: 총 요금 = 55,000 + 초과 요금",
        "Step 4: 110,000원 상한 확인",
        "Step 5: 구간별로 식 정리"
      ],
      "answer": {
        "a": "김철수: 55,000원, 이영희: 82,500원, 박민수: 110,000원",
        "b": "f(x) = {55,000 (x≤5), 55,000+11,000(x-5) (5<x≤10), 110,000 (x>10)}",
        "c": "예, 모든 경계점에서 연속"
      },
      "difficulty": "medium",
      "scaffolding_steps": 5
    },
    {
      "number": 5,
      "act": "Act 2: 변화의 규칙",
      "title": "편의점 아르바이트 급여",
      "concept": "선형 함수",
      "problem_context": "대학생 지수는 편의점에서 시급 9,620원으로 아르바이트를 합니다. 매주 근무 시간이 다르지만, 급여는 정확히 근무 시간에 비례합니다. 지수는 한 달간 근무 기록을 분석하여 주당 평균 20시간을 일한다는 것을 알았습니다. 세금 공제 전 총 급여를 계산하는 시스템을 만들고자 합니다.",
      "data": {
        "시급": 9620,
        "주별_근무": {
          "1주차": 18,
          "2주차": 22,
          "3주차": 19,
          "4주차": 21
        },
        "월_총_시간": 80
      },
      "questions": [
        "a) 급여 함수 f(시간) = ?",
        "b) 각 주의 급여를 계산하시오.",
        "c) 월 총 급여는?",
        "d) 그래프를 그리면 어떤 모양인가?"
      ],
      "scaffolding": [
        "Step 1: 급여 = 시급 × 시간",
        "Step 2: f(x) = 9620x 형태",
        "Step 3: 각 주별로 대입",
        "Step 4: 1주차: 9620 × 18 계산",
        "Step 5: 모든 주 급여 합산",
        "Step 6: 원점을 지나는 직선"
      ],
      "answer": {
        "a": "f(x) = 9620x",
        "b": "1주차: 173,160원, 2주차: 211,640원, 3주차: 182,780원, 4주차: 202,020원",
        "c": "769,600원",
        "d": "원점을 지나는 직선 (비례 관계)"
      },
      "difficulty": "medium",
      "scaffolding_steps": 6
    },
    {
      "number": 6,
      "act": "Act 2: 변화의 규칙",
      "title": "자전거 대여 서비스",
      "concept": "계단 함수",
      "problem_context": "서울시 공공자전거 '따릉이'는 시간별 요금제를 운영합니다. 첫 1시간은 1,000원, 이후 30분마다 500원씩 추가됩니다. 하루 최대 이용 시간은 4시간이며, 4시간을 초과하면 자동 반납 처리됩니다. 시스템은 1분 단위로 시간을 측정하지만, 요금은 30분 단위로 올림 처리합니다.",
      "data": {
        "기본_요금": "1시간 1,000원",
        "추가_요금": "30분당 500원",
        "최대_시간": "4시간",
        "이용_기록": [
          {"사용자": "A", "이용시간": "45분", "요금": "?"},
          {"사용자": "B", "이용시간": "1시간 20분", "요금": "?"},
          {"사용자": "C", "이용시간": "2시간 45분", "요금": "?"}
        ]
      },
      "questions": [
        "a) 각 사용자의 요금을 계산하시오.",
        "b) 요금 함수의 그래프는 어떤 모양인가?",
        "c) 이 함수가 연속인가? 불연속이라면 어느 점에서?"
      ],
      "scaffolding": [
        "Step 1: 시간을 30분 단위로 올림",
        "Step 2: 45분 → 1시간으로 계산",
        "Step 3: 1시간 20분 → 1시간 30분으로 계산",
        "Step 4: 기본 1시간 + 추가 30분 단위",
        "Step 5: 계단 모양 그래프",
        "Step 6: 30분마다 점프(불연속)",
        "Step 7: 불연속점 찾기"
      ],
      "answer": {
        "a": "A: 1,000원, B: 1,500원, C: 2,500원",
        "b": "계단 함수 (30분마다 500원씩 상승)",
        "c": "불연속. 30분, 60분, 90분 등의 배수 시점에서 불연속"
      },
      "difficulty": "medium",
      "scaffolding_steps": 7
    },
    {
      "number": 7,
      "act": "Act 2: 변화의 규칙",
      "title": "택시 요금 계산",
      "concept": "복합 선형 함수",
      "problem_context": "서울시 택시는 기본요금 3,800원에 132m당 100원씩 추가됩니다. 심야(오전 0시-4시)에는 20% 할증이 적용됩니다. 택시 미터기는 거리와 시간을 동시에 측정하여 정체 시에는 31초당 100원을 추가합니다. 김 씨는 새벽 2시에 택시를 타고 5.28km를 이동했으며, 신호 대기로 총 3분 5초가 소요되었습니다.",
      "data": {
        "기본요금": 3800,
        "거리요금": "132m당 100원",
        "시간요금": "31초당 100원",
        "심야할증": "20%",
        "이동거리": 5280,
        "대기시간": 185
      },
      "questions": [
        "a) 거리 요금을 계산하시오.",
        "b) 시간 요금을 계산하시오.",
        "c) 할증 적용 전 총 요금은?",
        "d) 최종 요금은?"
      ],
      "scaffolding": [
        "Step 1: 거리 요금 = (5280 ÷ 132) × 100",
        "Step 2: 5280 ÷ 132 = 40구간",
        "Step 3: 거리 요금 = 40 × 100 = 4,000원",
        "Step 4: 시간 요금 = (185 ÷ 31) × 100",
        "Step 5: 185 ÷ 31 ≈ 6구간 (올림)",
        "Step 6: 시간 요금 = 600원",
        "Step 7: 소계 = 3,800 + 4,000 + 600",
        "Step 8: 할증 = 소계 × 1.2"
      ],
      "answer": {
        "a": "4,000원",
        "b": "600원",
        "c": "8,400원",
        "d": "10,080원"
      },
      "difficulty": "hard",
      "scaffolding_steps": 8
    },
    {
      "number": 8,
      "act": "Act 2: 변화의 규칙",
      "title": "전기 요금 누진제",
      "concept": "구간별 증가 함수",
      "problem_context": "한국전력의 주택용 전기요금은 사용량에 따라 누진제가 적용됩니다. 200kWh 이하는 kWh당 93.3원, 201-400kWh는 kWh당 187.9원, 400kWh 초과분은 kWh당 280.6원입니다. 기본료 910원이 별도로 부과됩니다. 한 가정이 여름철 에어컨 사용으로 월 450kWh를 사용했습니다.",
      "data": {
        "기본료": 910,
        "구간별_단가": {
          "1구간": {"범위": "0-200", "단가": 93.3},
          "2구간": {"범위": "201-400", "단가": 187.9},
          "3구간": {"범위": "401+", "단가": 280.6}
        },
        "사용량": 450
      },
      "questions": [
        "a) 각 구간별 요금을 계산하시오.",
        "b) 총 전기요금은?",
        "c) 평균 kWh당 요금은?",
        "d) 사용량-요금 그래프의 특징은?"
      ],
      "scaffolding": [
        "Step 1: 1구간: 200 × 93.3",
        "Step 2: 2구간: 200 × 187.9",
        "Step 3: 3구간: 50 × 280.6",
        "Step 4: 구간별 계산",
        "Step 5: 1구간 = 18,660원",
        "Step 6: 2구간 = 37,580원",
        "Step 7: 3구간 = 14,030원",
        "Step 8: 총합 + 기본료",
        "Step 9: 평균 = 총요금 ÷ 사용량"
      ],
      "answer": {
        "a": "1구간: 18,660원, 2구간: 37,580원, 3구간: 14,030원",
        "b": "71,180원",
        "c": "약 158.2원/kWh",
        "d": "구간별로 기울기가 증가하는 연속 함수"
      },
      "difficulty": "hard",
      "scaffolding_steps": 9
    },
    {
      "number": 9,
      "act": "Act 3: 패턴의 발견",
      "title": "피보나치 토끼 농장",
      "concept": "재귀 함수",
      "problem_context": "한 토끼 농장은 특별한 번식 패턴을 관찰했습니다. 새로 태어난 토끼 쌍은 한 달 후 성체가 되고, 성체 토끼 쌍은 매달 새로운 한 쌍을 낳습니다. 농장은 신생 토끼 한 쌍으로 시작했습니다. 농장주는 토끼 쌍의 수가 피보나치 수열을 따른다는 것을 발견했습니다.",
      "data": {
        "초기": "신생 토끼 1쌍",
        "월별_토끼쌍": {
          "1개월": 1,
          "2개월": 1,
          "3개월": 2,
          "4개월": 3,
          "5개월": 5,
          "6개월": "?"
        },
        "규칙": "f(n) = f(n-1) + f(n-2)"
      },
      "questions": [
        "a) 6개월 후 토끼 쌍의 수는?",
        "b) 7개월, 8개월 후는?",
        "c) 10개월 후 예상 토끼 쌍 수는?",
        "d) 이 패턴이 함수인 이유를 설명하시오."
      ],
      "scaffolding": [
        "Step 1: 피보나치 규칙 이해",
        "Step 2: f(6) = f(5) + f(4)",
        "Step 3: f(6) = 5 + 3 = 8",
        "Step 4: f(7) = f(6) + f(5)",
        "Step 5: f(7) = 8 + 5 = 13",
        "Step 6: f(8) = 13 + 8 = 21",
        "Step 7: 계속 계산하여 f(10) 구하기",
        "Step 8: 각 월(입력)이 유일한 토끼 수(출력) 결정",
        "Step 9: 재귀적 정의도 함수"
      ],
      "answer": {
        "a": "8쌍",
        "b": "7개월: 13쌍, 8개월: 21쌍",
        "c": "55쌍",
        "d": "각 월(입력)이 정확히 하나의 토끼 쌍 수(출력)를 결정"
      },
      "difficulty": "hard",
      "scaffolding_steps": 9
    },
    {
      "number": 10,
      "act": "Act 3: 패턴의 발견",
      "title": "복리 저축 계산",
      "concept": "지수 함수",
      "problem_context": "은행의 정기예금 상품은 연 5% 복리로 이자를 지급합니다. 김 씨는 1,000만원을 예치했습니다. 복리란 원금뿐만 아니라 이자에도 이자가 붙는 방식입니다. 은행 시스템은 매년 말 자동으로 이자를 계산하여 원금에 더합니다. 김 씨는 10년 후 자녀 대학 등록금으로 사용할 계획입니다.",
      "data": {
        "원금": 10000000,
        "이율": 0.05,
        "기간": 10,
        "복리공식": "A = P(1 + r)^t"
      },
      "questions": [
        "a) 1년, 2년, 3년 후 잔액을 계산하시오.",
        "b) 10년 후 총 금액은?",
        "c) 받은 총 이자는?",
        "d) 단리와 비교하면 얼마나 이득인가?"
      ],
      "scaffolding": [
        "Step 1: 1년 후 = 10,000,000 × 1.05",
        "Step 2: 2년 후 = 1년 후 금액 × 1.05",
        "Step 3: 3년 후 = 2년 후 금액 × 1.05",
        "Step 4: 패턴: 매년 1.05배",
        "Step 5: 10년 후 = 10,000,000 × (1.05)^10",
        "Step 6: 1.05^10 계산",
        "Step 7: 총 이자 = 최종금액 - 원금",
        "Step 8: 단리 = 원금 × 이율 × 기간",
        "Step 9: 복리 이득 = 복리이자 - 단리이자",
        "Step 10: 지수적 성장 확인"
      ],
      "answer": {
        "a": "1년: 10,500,000원, 2년: 11,025,000원, 3년: 11,576,250원",
        "b": "약 16,288,946원",
        "c": "약 6,288,946원",
        "d": "단리(5,000,000원)보다 약 1,288,946원 이득"
      },
      "difficulty": "very_hard",
      "scaffolding_steps": 10
    },
    {
      "number": 11,
      "act": "Act 3: 패턴의 발견",
      "title": "주기적 판매 패턴",
      "concept": "주기 함수",
      "problem_context": "한 아이스크림 가게는 계절에 따른 판매 패턴을 분석했습니다. 여름(6-8월)에 최대, 겨울(12-2월)에 최소 판매량을 보입니다. 월별 판매량은 사인 함수 형태를 따르며, 평균 일일 판매량은 200개, 진폭은 100개입니다. 가게는 이 패턴을 이용해 재고 관리를 최적화하려 합니다.",
      "data": {
        "평균_판매량": 200,
        "진폭": 100,
        "최대_월": 7,
        "최소_월": 1,
        "함수": "f(월) = 200 + 100×sin((월-4)×π/6)"
      },
      "questions": [
        "a) 1월, 4월, 7월, 10월의 예상 판매량은?",
        "b) 판매량이 250개 이상인 달은?",
        "c) 연간 총 예상 판매량은?",
        "d) 이 패턴이 2년째도 반복된다면?"
      ],
      "scaffolding": [
        "Step 1: 각 월을 함수에 대입",
        "Step 2: 1월: f(1) = 200 + 100×sin(-3π/6)",
        "Step 3: sin(-π/2) = -1",
        "Step 4: f(1) = 200 - 100 = 100",
        "Step 5: 4월: sin(0) = 0, f(4) = 200",
        "Step 6: 7월: sin(π/2) = 1, f(7) = 300",
        "Step 7: 10월: sin(π) = 0, f(10) = 200",
        "Step 8: 250 이상 조건 확인",
        "Step 9: 12개월 합계",
        "Step 10: 주기성 확인"
      ],
      "answer": {
        "a": "1월: 100개, 4월: 200개, 7월: 300개, 10월: 200개",
        "b": "6월, 7월, 8월",
        "c": "73,200개 (200×365)",
        "d": "같은 패턴 반복 (주기 함수)"
      },
      "difficulty": "very_hard",
      "scaffolding_steps": 10
    },
    {
      "number": 12,
      "act": "Act 4: 함수의 변환",
      "title": "온도 변환 시스템",
      "concept": "선형 변환",
      "problem_context": "국제 기상 데이터 센터는 각국의 온도 데이터를 수집합니다. 미국은 화씨(°F), 한국은 섭씨(°C), 일부 과학 데이터는 켈빈(K)을 사용합니다. 변환 공식은 C = (F-32)×5/9, K = C+273.15입니다. 센터는 모든 데이터를 섭씨로 통일하여 저장합니다. 오늘 서울은 25°C, 뉴욕은 77°F, 국제우주정거장은 298K를 기록했습니다.",
      "data": {
        "변환_공식": {
          "F_to_C": "C = (F-32)×5/9",
          "C_to_K": "K = C+273.15",
          "C_to_F": "F = C×9/5+32"
        },
        "오늘_온도": {
          "서울": "25°C",
          "뉴욕": "77°F",
          "ISS": "298K"
        }
      },
      "questions": [
        "a) 모든 온도를 섭씨로 변환하시오.",
        "b) 가장 높은 온도와 낮은 온도의 차이는?",
        "c) 물의 어는점(0°C)과 끓는점(100°C)을 화씨로 변환하시오.",
        "d) 절대영도(-273.15°C)는 화씨로 몇 도인가?"
      ],
      "scaffolding": [
        "Step 1: 뉴욕 77°F → °C 변환",
        "Step 2: (77-32)×5/9 계산",
        "Step 3: 45×5/9 = 25°C",
        "Step 4: ISS 298K → °C 변환",
        "Step 5: 298 - 273.15 = 24.85°C",
        "Step 6: 비교: 서울 25°C, 뉴욕 25°C, ISS 24.85°C",
        "Step 7: 0°C → °F: 0×9/5+32 = 32°F",
        "Step 8: 100°C → °F: 100×9/5+32 = 212°F",
        "Step 9: -273.15°C → °F 계산",
        "Step 10: -273.15×9/5+32 = -459.67°F",
        "Step 11: 변환의 선형성 확인"
      ],
      "answer": {
        "a": "서울: 25°C, 뉴욕: 25°C, ISS: 24.85°C",
        "b": "0.15°C",
        "c": "어는점: 32°F, 끓는점: 212°F",
        "d": "-459.67°F"
      },
      "difficulty": "very_hard",
      "scaffolding_steps": 11
    },
    {
      "number": 13,
      "act": "Act 4: 함수의 변환",
      "title": "환율 변동과 여행 경비",
      "concept": "복합 함수",
      "problem_context": "여행사는 패키지 상품 가격을 계산합니다. 기본 비용은 달러로 책정되고, 환율에 따라 원화 가격이 결정됩니다. 항공료 $800, 호텔 $600, 현지 투어 $200입니다. 현재 환율은 1달러 = 1,300원이지만, 예약 시점과 여행 시점의 환율이 다를 수 있습니다. 여행사는 5% 수수료를 추가하고, 10% 부가세가 별도 부과됩니다.",
      "data": {
        "비용_달러": {
          "항공": 800,
          "호텔": 600,
          "투어": 200,
          "합계": 1600
        },
        "현재_환율": 1300,
        "수수료": 0.05,
        "부가세": 0.1
      },
      "questions": [
        "a) 현재 환율로 원화 기본 비용은?",
        "b) 수수료 포함 금액은?",
        "c) 최종 지불 금액(부가세 포함)은?",
        "d) 환율이 1,250원으로 하락하면 얼마나 절약되는가?"
      ],
      "scaffolding": [
        "Step 1: 달러 총액 × 환율",
        "Step 2: 1600 × 1300 = 2,080,000원",
        "Step 3: 수수료 = 기본비용 × 0.05",
        "Step 4: 2,080,000 × 0.05 = 104,000원",
        "Step 5: 수수료 포함 = 2,080,000 + 104,000",
        "Step 6: = 2,184,000원",
        "Step 7: 부가세 = 2,184,000 × 0.1",
        "Step 8: = 218,400원",
        "Step 9: 최종 = 2,184,000 + 218,400",
        "Step 10: = 2,402,400원",
        "Step 11: 새 환율로 재계산하여 차액 구하기"
      ],
      "answer": {
        "a": "2,080,000원",
        "b": "2,184,000원",
        "c": "2,402,400원",
        "d": "91,300원 절약"
      },
      "difficulty": "very_hard",
      "scaffolding_steps": 11
    },
    {
      "number": 14,
      "act": "Act 4: 함수의 변환",
      "title": "소리의 거리 계산",
      "concept": "역함수",
      "problem_context": "번개와 천둥의 시간차로 거리를 계산할 수 있습니다. 빛은 즉시 도달하지만, 소리는 초당 340m를 이동합니다. 기상 관측소는 번개 감지 후 천둥 소리까지의 시간을 측정하여 번개 발생 지점까지의 거리를 계산합니다. 안전 규정상 10km 이내 번개 감지 시 야외 활동을 중단해야 합니다.",
      "data": {
        "음속": 340,
        "빛속도": "즉시",
        "안전거리": 10000,
        "관측_기록": [
          {"시간차": 3, "거리": "?"},
          {"시간차": 8.5, "거리": "?"},
          {"시간차": 15, "거리": "?"}
        ]
      },
      "questions": [
        "a) 각 관측의 번개 거리를 계산하시오.",
        "b) 안전 규정 위반 사례는?",
        "c) 거리 함수 d(t)와 역함수 t(d)를 구하시오.",
        "d) 5km 거리 번개의 시간차는?"
      ],
      "scaffolding": [
        "Step 1: 거리 = 속도 × 시간",
        "Step 2: d = 340 × t",
        "Step 3: 3초: 340 × 3 = 1,020m",
        "Step 4: 8.5초: 340 × 8.5 = 2,890m",
        "Step 5: 15초: 340 × 15 = 5,100m",
        "Step 6: 10km = 10,000m와 비교",
        "Step 7: 모두 10km 이내 (안전 규정 위반)",
        "Step 8: d(t) = 340t",
        "Step 9: 역함수: t = d/340",
        "Step 10: t(d) = d/340",
        "Step 11: 5km = 5000m, t = 5000/340 ≈ 14.7초"
      ],
      "answer": {
        "a": "1,020m, 2,890m, 5,100m",
        "b": "모든 경우 (모두 10km 이내)",
        "c": "d(t) = 340t, t(d) = d/340",
        "d": "약 14.7초"
      },
      "difficulty": "very_hard",
      "scaffolding_steps": 11
    },
    {
      "number": 15,
      "act": "Act 5: 실생활 응용",
      "title": "카페 매출 최적화",
      "concept": "최적화 문제",
      "problem_context": "카페 사장은 커피 가격과 판매량의 관계를 분석했습니다. 가격이 3,000원일 때 하루 200잔, 4,000원일 때 150잔, 5,000원일 때 100잔이 팔립니다. 판매량과 가격은 선형 관계를 보입니다. 커피 한 잔의 원가는 1,500원입니다. 사장은 이익을 최대화하는 가격을 찾고자 합니다.",
      "data": {
        "가격_판매량": [
          {"가격": 3000, "판매량": 200},
          {"가격": 4000, "판매량": 150},
          {"가격": 5000, "판매량": 100}
        ],
        "원가": 1500,
        "고정비용_일": 200000
      },
      "questions": [
        "a) 판매량 함수 Q(p)를 구하시오.",
        "b) 매출 함수 R(p)를 구하시오.",
        "c) 이익 함수 P(p)를 구하시오.",
        "d) 이익을 최대화하는 가격은?"
      ],
      "scaffolding": [
        "Step 1: 두 점으로 직선 방정식",
        "Step 2: 기울기 = (150-200)/(4000-3000)",
        "Step 3: = -50/1000 = -0.05",
        "Step 4: Q(p) = 200 - 0.05(p-3000)",
        "Step 5: Q(p) = 350 - 0.05p",
        "Step 6: 매출 R(p) = p × Q(p)",
        "Step 7: R(p) = p(350 - 0.05p)",
        "Step 8: R(p) = 350p - 0.05p²",
        "Step 9: 이익 = 매출 - 비용",
        "Step 10: 비용 = 원가×판매량 + 고정비",
        "Step 11: 이익 최대화 지점 찾기"
      ],
      "answer": {
        "a": "Q(p) = 350 - 0.05p",
        "b": "R(p) = 350p - 0.05p²",
        "c": "P(p) = 350p - 0.05p² - 1500(350-0.05p) - 200000",
        "d": "4,250원"
      },
      "difficulty": "very_hard",
      "scaffolding_steps": 11
    },
    {
      "number": 16,
      "act": "Act 5: 실생활 응용",
      "title": "농작물 성장 모델",
      "concept": "로지스틱 함수",
      "problem_context": "스마트팜에서 토마토 성장을 모니터링합니다. 초기 높이 10cm에서 시작하여 최대 200cm까지 자랍니다. 성장 속도는 처음에는 빠르다가 점차 느려집니다. 4주 후 50cm, 8주 후 120cm, 12주 후 180cm를 기록했습니다. 농장은 이 데이터로 수확 시기를 예측하려 합니다.",
      "data": {
        "초기_높이": 10,
        "최대_높이": 200,
        "성장_기록": [
          {"주": 0, "높이": 10},
          {"주": 4, "높이": 50},
          {"주": 8, "높이": 120},
          {"주": 12, "높이": 180}
        ],
        "목표_높이": 170
      },
      "questions": [
        "a) 각 4주 기간의 성장량을 계산하시오.",
        "b) 성장 속도가 어떻게 변하는가?",
        "c) 170cm 도달 예상 시기는?",
        "d) 이 성장 패턴의 특징을 설명하시오."
      ],
      "scaffolding": [
        "Step 1: 0-4주: 50-10 = 40cm",
        "Step 2: 4-8주: 120-50 = 70cm",
        "Step 3: 8-12주: 180-120 = 60cm",
        "Step 4: 성장량 비교: 40 → 70 → 60",
        "Step 5: 중간에 최대 성장",
        "Step 6: 초기: 느림, 중기: 빠름, 후기: 느림",
        "Step 7: S자 곡선 패턴",
        "Step 8: 8-12주 사이 어딘가",
        "Step 9: 선형 보간법 사용",
        "Step 10: 170cm는 120과 180 사이",
        "Step 11: 약 10-11주 예상"
      ],
      "answer": {
        "a": "0-4주: 40cm, 4-8주: 70cm, 8-12주: 60cm",
        "b": "느림 → 빠름 → 느림 (S자 곡선)",
        "c": "약 10-11주",
        "d": "로지스틱 성장: 초기 지수적, 후기 포화"
      },
      "difficulty": "very_hard",
      "scaffolding_steps": 11
    },
    {
      "number": 17,
      "act": "Act 5: 실생활 응용",
      "title": "네트워크 트래픽 분석",
      "concept": "주기성과 추세",
      "problem_context": "웹사이트의 일일 방문자 수는 요일별 패턴과 월별 성장을 동시에 보입니다. 평일 평균 5,000명, 주말 평균 3,000명이며, 매월 10%씩 성장합니다. 1월 첫째 주 월요일 5,000명으로 시작했습니다. 서버는 동시 접속자 8,000명까지 처리 가능하며, 용량 증설을 계획해야 합니다.",
      "data": {
        "평일_기준": 5000,
        "주말_기준": 3000,
        "월_성장률": 0.1,
        "서버_용량": 8000,
        "시작": {"월": 1, "방문자": 5000}
      },
      "questions": [
        "a) 1월 한 주간 방문자 수 패턴은?",
        "b) 3월 평일 예상 방문자는?",
        "c) 서버 용량 초과 예상 시기는?",
        "d) 연말 예상 일일 방문자는?"
      ],
      "scaffolding": [
        "Step 1: 월-금: 5,000명씩",
        "Step 2: 토-일: 3,000명씩",
        "Step 3: 주간 합: 5×5,000 + 2×3,000",
        "Step 4: = 25,000 + 6,000 = 31,000명",
        "Step 5: 2개월 후 = 초기 × (1.1)²",
        "Step 6: 5,000 × 1.21 = 6,050명",
        "Step 7: 용량 초과: 5,000 × (1.1)^n > 8,000",
        "Step 8: (1.1)^n > 1.6",
        "Step 9: n × log(1.1) > log(1.6)",
        "Step 10: n > 4.9, 즉 5개월 후",
        "Step 11: 11개월 후 = 5,000 × (1.1)^11 ≈ 14,265명"
      ],
      "answer": {
        "a": "월-금: 5,000명, 토-일: 3,000명",
        "b": "6,050명",
        "c": "6월 (5개월 후)",
        "d": "평일 약 14,265명"
      },
      "difficulty": "very_hard",
      "scaffolding_steps": 11
    },
    {
      "number": 18,
      "act": "Act 6: 비선형의 세계",
      "title": "물체의 자유낙하",
      "concept": "이차함수 (x²)",
      "problem_context": "63빌딩(높이 249m) 전망대에서 물체를 떨어뜨리는 실험을 합니다. 중력가속도는 9.8m/s²이며, 낙하 거리는 d = 4.9t² (t는 초)로 계산됩니다. 공기 저항은 무시합니다. 안전을 위해 건물 아래는 통제되어 있으며, 낙하 실험은 과학 교육 목적입니다.",
      "data": {
        "건물_높이": 249,
        "중력가속도": 9.8,
        "낙하공식": "d = 4.9t²",
        "측정_시간": [1, 2, 3, 4, 5]
      },
      "questions": [
        "a) 각 시간별 낙하 거리를 계산하시오.",
        "b) 지면 도달 시간은?",
        "c) 낙하 속도 함수 v(t)는?",
        "d) 지면 도달 시 속도는?"
      ],
      "scaffolding": [
        "Step 1: t=1: d = 4.9×1² = 4.9m",
        "Step 2: t=2: d = 4.9×4 = 19.6m",
        "Step 3: t=3: d = 4.9×9 = 44.1m",
        "Step 4: t=4: d = 4.9×16 = 78.4m",
        "Step 5: t=5: d = 4.9×25 = 122.5m",
        "Step 6: 249 = 4.9t²",
        "Step 7: t² = 249/4.9 ≈ 50.8",
        "Step 8: t ≈ 7.13초",
        "Step 9: 속도 = 거리의 변화율",
        "Step 10: v(t) = 9.8t",
        "Step 11: v(7.13) = 9.8×7.13 ≈ 69.9m/s"
      ],
      "answer": {
        "a": "1초: 4.9m, 2초: 19.6m, 3초: 44.1m, 4초: 78.4m, 5초: 122.5m",
        "b": "약 7.13초",
        "c": "v(t) = 9.8t",
        "d": "약 69.9m/s (251.6km/h)"
      },
      "difficulty": "very_hard",
      "scaffolding_steps": 11
    },
    {
      "number": 19,
      "act": "Act 6: 비선형의 세계",
      "title": "공원 분수대 설계",
      "concept": "포물선 (이차함수)",
      "problem_context": "공원 분수대는 물을 포물선 궤적으로 쏘아 올립니다. 물줄기는 h(x) = -0.5x² + 4x 형태를 따릅니다 (h는 높이(m), x는 수평거리(m)). 분수대 설계자는 최대 높이와 도달 거리를 계산하여 주변 보행로를 설계해야 합니다. 바람이 없는 날 기준이며, 어린이 안전을 위해 분수 주변 2m는 접근 금지 구역입니다.",
      "data": {
        "궤적함수": "h(x) = -0.5x² + 4x",
        "안전거리": 2,
        "측정점": [0, 2, 4, 6, 8]
      },
      "questions": [
        "a) 각 측정점에서 물의 높이는?",
        "b) 최대 높이와 그 때의 수평거리는?",
        "c) 물이 땅에 닿는 거리는?",
        "d) 안전 구역은 충분한가?"
      ],
      "scaffolding": [
        "Step 1: x=0: h = 0",
        "Step 2: x=2: h = -0.5×4 + 4×2 = 6",
        "Step 3: x=4: h = -0.5×16 + 16 = 8",
        "Step 4: x=6: h = -0.5×36 + 24 = 6",
        "Step 5: x=8: h = -0.5×64 + 32 = 0",
        "Step 6: 대칭축 x = -b/2a = 4",
        "Step 7: 최대 높이 h(4) = 8m",
        "Step 8: h(x) = 0 풀기",
        "Step 9: x(4-0.5x) = 0",
        "Step 10: x = 0 또는 x = 8",
        "Step 11: 도달거리 8m > 안전거리 2m (재설계 필요)"
      ],
      "answer": {
        "a": "0m, 6m, 8m, 6m, 0m",
        "b": "최대 높이 8m (수평거리 4m 지점)",
        "c": "8m",
        "d": "아니오, 8m > 2m (재설계 필요)"
      },
      "difficulty": "very_hard",
      "scaffolding_steps": 11
    },
    {
      "number": 20,
      "act": "Act 6: 비선형의 세계",
      "title": "태양광 패널 효율",
      "concept": "이차함수 최적화",
      "problem_context": "태양광 패널의 발전 효율은 온도에 따라 변합니다. 효율 함수는 E(T) = -0.4(T-25)² + 100 (E는 효율(%), T는 온도(°C))입니다. 여름철 패널 온도는 오전 6시 20°C에서 시작하여 오후 2시 최고 65°C까지 올라갑니다. 발전소는 냉각 시스템 투자를 검토 중입니다.",
      "data": {
        "효율함수": "E(T) = -0.4(T-25)² + 100",
        "온도범위": {"최저": 20, "최고": 65},
        "시간별_온도": {
          "6시": 20,
          "9시": 35,
          "12시": 55,
          "15시": 65,
          "18시": 45
        }
      },
      "questions": [
        "a) 각 시간대별 효율을 계산하시오.",
        "b) 최적 온도와 최대 효율은?",
        "c) 가장 효율이 낮은 시간은?",
        "d) 평균 효율은?"
      ],
      "scaffolding": [
        "Step 1: 6시: E(20) = -0.4×(-5)² + 100",
        "Step 2: = -0.4×25 + 100 = 90%",
        "Step 3: 9시: E(35) = -0.4×(10)² + 100",
        "Step 4: = -40 + 100 = 60%",
        "Step 5: 12시: E(55) = -0.4×(30)² + 100",
        "Step 6: = -360 + 100 = -260% (오류, 재계산)",
        "Step 7: = -0.4×900 + 100 = 64%",
        "Step 8: 15시: E(65) = -0.4×(40)² + 100 = 36%",
        "Step 9: 18시: E(45) = -0.4×(20)² + 100 = 84%",
        "Step 10: 최적: T = 25°C, E = 100%",
        "Step 11: 평균 = (90+60+64+36+84)/5 = 66.8%"
      ],
      "answer": {
        "a": "6시: 90%, 9시: 60%, 12시: 64%, 15시: 36%, 18시: 84%",
        "b": "25°C에서 100%",
        "c": "오후 3시 (36%)",
        "d": "66.8%"
      },
      "difficulty": "very_hard",
      "scaffolding_steps": 11
    },
    {
      "number": 21,
      "act": "Act 6: 비선형의 세계",
      "title": "박테리아 배양 실험",
      "concept": "지수 성장",
      "problem_context": "실험실에서 박테리아를 배양합니다. 초기 개체수 1,000개에서 시작하여 매 시간 2배로 증가합니다. 배양 용기는 최대 1,000,000개까지 수용 가능하며, 그 이상이 되면 영양분 부족으로 성장이 멈춥니다. 연구원은 실험 시작 후 언제 새로운 배양 용기로 옮겨야 하는지 계산해야 합니다.",
      "data": {
        "초기_개체수": 1000,
        "성장률": 2,
        "용기_한계": 1000000,
        "관찰_시간": [0, 1, 2, 3, 4, 5]
      },
      "questions": [
        "a) 5시간까지 각 시간별 개체수는?",
        "b) 용기 한계 도달 시간은?",
        "c) 8시간 후 예상 개체수는?",
        "d) 성장 함수 N(t)를 작성하시오."
      ],
      "scaffolding": [
        "Step 1: N(0) = 1,000",
        "Step 2: N(1) = 1,000 × 2 = 2,000",
        "Step 3: N(2) = 2,000 × 2 = 4,000",
        "Step 4: N(3) = 4,000 × 2 = 8,000",
        "Step 5: N(4) = 8,000 × 2 = 16,000",
        "Step 6: N(5) = 16,000 × 2 = 32,000",
        "Step 7: 1,000 × 2^t = 1,000,000",
        "Step 8: 2^t = 1,000",
        "Step 9: t × log(2) = log(1,000)",
        "Step 10: t = 3/0.301 ≈ 9.97시간",
        "Step 11: N(t) = 1,000 × 2^t"
      ],
      "answer": {
        "a": "0시: 1,000, 1시: 2,000, 2시: 4,000, 3시: 8,000, 4시: 16,000, 5시: 32,000",
        "b": "약 10시간",
        "c": "256,000개",
        "d": "N(t) = 1,000 × 2^t"
      },
      "difficulty": "very_hard",
      "scaffolding_steps": 11
    },
    {
      "number": 22,
      "act": "Act 6: 비선형의 세계",
      "title": "방사성 물질 반감기",
      "concept": "지수 감소",
      "problem_context": "의료용 방사성 동위원소 요오드-131의 반감기는 8일입니다. 병원은 100mg을 구입했으며, 환자 치료에는 최소 10mg이 필요합니다. 방사성 물질은 특수 보관함에 저장되며, 정기적으로 남은 양을 측정합니다. 폐기 기준은 1mg 이하입니다.",
      "data": {
        "초기량": 100,
        "반감기": 8,
        "치료_최소량": 10,
        "폐기_기준": 1,
        "측정_일": [0, 8, 16, 24, 32]
      },
      "questions": [
        "a) 각 측정일의 남은 양은?",
        "b) 치료 가능 기한은?",
        "c) 폐기 시점은?",
        "d) 감소 함수 A(t)를 작성하시오."
      ],
      "scaffolding": [
        "Step 1: 0일: 100mg",
        "Step 2: 8일: 100 × 0.5 = 50mg",
        "Step 3: 16일: 50 × 0.5 = 25mg",
        "Step 4: 24일: 25 × 0.5 = 12.5mg",
        "Step 5: 32일: 12.5 × 0.5 = 6.25mg",
        "Step 6: 100 × (0.5)^(t/8) = 10",
        "Step 7: (0.5)^(t/8) = 0.1",
        "Step 8: t/8 × log(0.5) = log(0.1)",
        "Step 9: t ≈ 26.6일",
        "Step 10: 폐기: 100 × (0.5)^(t/8) = 1, t ≈ 53.2일",
        "Step 11: A(t) = 100 × (0.5)^(t/8)"
      ],
      "answer": {
        "a": "0일: 100mg, 8일: 50mg, 16일: 25mg, 24일: 12.5mg, 32일: 6.25mg",
        "b": "약 26.6일",
        "c": "약 53.2일",
        "d": "A(t) = 100 × (0.5)^(t/8)"
      },
      "difficulty": "very_hard",
      "scaffolding_steps": 11
    },
    {
      "number": 23,
      "act": "Act 7: 함수의 합성",
      "title": "운동 칼로리 계산",
      "concept": "함수의 합성",
      "problem_context": "피트니스 앱은 운동 시간과 강도로 칼로리를 계산합니다. 먼저 심박수로 운동 강도를 결정하고(저강도: 1.5배, 중강도: 2배, 고강도: 3배), 그 다음 기초대사량에 강도를 곱합니다. 30세 남성(기초대사량 1,800kcal/일)이 1시간 운동했습니다. 평균 심박수는 140bpm이었습니다.",
      "data": {
        "기초대사량": 1800,
        "운동시간": 1,
        "심박수": 140,
        "강도_기준": {
          "저": {"범위": "100-120", "배수": 1.5},
          "중": {"범위": "121-150", "배수": 2},
          "고": {"범위": "151+", "배수": 3}
        }
      },
      "questions": [
        "a) 운동 강도 단계는?",
        "b) 시간당 칼로리 소모량은?",
        "c) 총 칼로리 소모량은?",
        "d) 일주일간 매일 같은 운동 시 총 소모량은?"
      ],
      "scaffolding": [
        "Step 1: 심박수 140 → 강도 확인",
        "Step 2: 121-150 범위 → 중강도",
        "Step 3: 중강도 배수 = 2",
        "Step 4: 일일 기초대사 = 1,800kcal",
        "Step 5: 시간당 기초대사 = 1,800/24",
        "Step 6: = 75kcal/시간",
        "Step 7: 운동 시 = 75 × 2",
        "Step 8: = 150kcal/시간",
        "Step 9: 1시간 운동 = 150kcal",
        "Step 10: 일주일 = 150 × 7",
        "Step 11: = 1,050kcal"
      ],
      "answer": {
        "a": "중강도",
        "b": "150kcal/시간",
        "c": "150kcal",
        "d": "1,050kcal"
      },
      "difficulty": "very_hard",
      "scaffolding_steps": 11
    },
    {
      "number": 24,
      "act": "Act 7: 함수의 합성",
      "title": "물류 센터 배송 시스템",
      "concept": "다단계 함수",
      "problem_context": "온라인 쇼핑몰의 물류 센터는 주문 처리 시스템을 운영합니다. 주문량에 따라 필요 직원 수를 계산하고(100건당 1명), 직원 수에 따라 처리 시간을 결정합니다(직원 1명당 시간당 20건). 오늘 1,500건의 주문이 들어왔고, 모든 주문을 8시간 내 처리해야 합니다.",
      "data": {
        "주문수": 1500,
        "직원_배치": "100건당 1명",
        "처리_속도": "직원당 20건/시간",
        "제한_시간": 8,
        "직원_시급": 10000
      },
      "questions": [
        "a) 필요한 직원 수는?",
        "b) 실제 처리 시간은?",
        "c) 총 인건비는?",
        "d) 6시간 내 처리하려면 직원을 몇 명 더 필요한가?"
      ],
      "scaffolding": [
        "Step 1: 직원 수 = 1,500 ÷ 100",
        "Step 2: = 15명",
        "Step 3: 시간당 처리량 = 15 × 20",
        "Step 4: = 300건/시간",
        "Step 5: 처리 시간 = 1,500 ÷ 300",
        "Step 6: = 5시간",
        "Step 7: 인건비 = 15명 × 5시간 × 10,000원",
        "Step 8: = 750,000원",
        "Step 9: 6시간 처리량 = 1,500 ÷ 6 = 250건/시간",
        "Step 10: 필요 직원 = 250 ÷ 20 = 12.5 → 13명",
        "Step 11: 현재 15명이므로 추가 불필요 (이미 5시간에 완료)"
      ],
      "answer": {
        "a": "15명",
        "b": "5시간",
        "c": "750,000원",
        "d": "추가 불필요 (이미 5시간에 완료)"
      },
      "difficulty": "very_hard",
      "scaffolding_steps": 11
    },
    {
      "number": 25,
      "act": "Act 8: 종합 응용",
      "title": "스마트시티 교통 최적화",
      "concept": "복합 시스템 함수",
      "problem_context": "스마트시티는 교통 신호를 실시간으로 조정합니다. 교통량 Q(t)는 시간에 따라 변하며, 오전 8시 피크(2,000대/시간), 오후 2시 최저(800대/시간), 오후 6시 피크(2,200대/시간)를 보입니다. 신호 주기는 T = 30 + 0.02Q초로 결정됩니다. 시스템은 대기 시간을 최소화하고 교통 흐름을 최적화합니다.",
      "data": {
        "교통량_패턴": {
          "8시": 2000,
          "14시": 800,
          "18시": 2200
        },
        "신호_함수": "T = 30 + 0.02Q",
        "도로_용량": 2500,
        "평균_차량길이": 5
      },
      "questions": [
        "a) 각 시간대의 신호 주기는?",
        "b) 하루 평균 교통량은?",
        "c) 도로 포화도가 가장 높은 시간은?",
        "d) 시스템 개선으로 처리량을 20% 증가시키면?"
      ],
      "scaffolding": [
        "Step 1: 8시: T = 30 + 0.02×2000",
        "Step 2: = 30 + 40 = 70초",
        "Step 3: 14시: T = 30 + 0.02×800",
        "Step 4: = 30 + 16 = 46초",
        "Step 5: 18시: T = 30 + 0.02×2200",
        "Step 6: = 30 + 44 = 74초",
        "Step 7: 평균 = (2000+800+2200)/3 = 1667대/시간",
        "Step 8: 포화도 = 교통량/용량",
        "Step 9: 18시: 2200/2500 = 88% (최고)",
        "Step 10: 20% 증가 → 용량 3000",
        "Step 11: 새 포화도 = 2200/3000 = 73%"
      ],
      "answer": {
        "a": "8시: 70초, 14시: 46초, 18시: 74초",
        "b": "약 1,667대/시간",
        "c": "오후 6시 (88%)",
        "d": "최고 포화도 73%로 감소"
      },
      "difficulty": "very_hard",
      "scaffolding_steps": 11
    },
    {
      "number": 26,
      "act": "Act 8: 종합 응용",
      "title": "게임 레벨 설계",
      "concept": "경험치 곡선",
      "problem_context": "RPG 게임의 레벨업 시스템을 설계합니다. 레벨 n에 필요한 경험치는 E(n) = 100n²입니다. 플레이어는 몬스터를 잡아 경험치를 얻으며, 일반 몬스터 50exp, 보스 500exp를 줍니다. 현재 레벨 10인 플레이어가 레벨 15를 목표로 합니다. 하루 평균 플레이 시간은 3시간이며, 시간당 20마리의 일반 몬스터를 잡을 수 있습니다.",
      "data": {
        "경험치_함수": "E(n) = 100n²",
        "현재_레벨": 10,
        "목표_레벨": 15,
        "몬스터_경험치": {
          "일반": 50,
          "보스": 500
        },
        "시간당_사냥": 20,
        "일일_플레이": 3
      },
      "questions": [
        "a) 레벨 15까지 필요한 총 경험치는?",
        "b) 일반 몬스터만으로 며칠 걸리는가?",
        "c) 매일 보스 2마리를 추가로 잡으면?",
        "d) 경험치 2배 이벤트 시 기간은?"
      ],
      "scaffolding": [
        "Step 1: 레벨 10 누적: E(10) = 100×100 = 10,000",
        "Step 2: 레벨 15 누적: E(15) = 100×225 = 22,500",
        "Step 3: 필요 경험치 = 22,500 - 10,000",
        "Step 4: = 12,500",
        "Step 5: 일일 일반 몬스터: 3시간 × 20마리 = 60마리",
        "Step 6: 일일 경험치: 60 × 50 = 3,000",
        "Step 7: 필요 일수: 12,500 ÷ 3,000 = 4.17일",
        "Step 8: 보스 추가: 일일 2×500 = 1,000",
        "Step 9: 총 일일: 3,000 + 1,000 = 4,000",
        "Step 10: 새 일수: 12,500 ÷ 4,000 = 3.13일",
        "Step 11: 2배 이벤트: 12,500 ÷ 6,000 = 2.08일"
      ],
      "answer": {
        "a": "12,500 경험치",
        "b": "약 4.2일",
        "c": "약 3.1일",
        "d": "약 2.1일"
      },
      "difficulty": "very_hard",
      "scaffolding_steps": 11
    },
    {
      "number": 27,
      "act": "Act 8: 종합 응용",
      "title": "주식 투자 시뮬레이션",
      "concept": "변동성과 수익",
      "problem_context": "주식 A는 매일 ±5% 범위에서 변동하며, 평균적으로 연 10% 상승합니다. 투자자는 1,000만원을 투자했습니다. 일일 변동은 무작위지만, 장기적으로는 상승 추세를 보입니다. 투자자는 손실 한계를 -20%, 목표 수익을 +30%로 설정했습니다.",
      "data": {
        "초기_투자": 10000000,
        "일일_변동": "±5%",
        "연간_수익": 0.1,
        "손절선": -0.2,
        "목표_수익": 0.3,
        "관찰_기간": 250
      },
      "questions": [
        "a) 1년 후 예상 가치는?",
        "b) 손절선 금액은?",
        "c) 목표 달성 금액은?",
        "d) 복리 효과로 10년 후 예상 가치는?"
      ],
      "scaffolding": [
        "Step 1: 연 수익 10%",
        "Step 2: 1년 후 = 10,000,000 × 1.1",
        "Step 3: = 11,000,000원",
        "Step 4: 손절선 = 10,000,000 × 0.8",
        "Step 5: = 8,000,000원",
        "Step 6: 목표 = 10,000,000 × 1.3",
        "Step 7: = 13,000,000원",
        "Step 8: 10년 복리 = 10,000,000 × (1.1)^10",
        "Step 9: (1.1)^10 ≈ 2.594",
        "Step 10: = 10,000,000 × 2.594",
        "Step 11: ≈ 25,940,000원"
      ],
      "answer": {
        "a": "11,000,000원",
        "b": "8,000,000원",
        "c": "13,000,000원",
        "d": "약 25,940,000원"
      },
      "difficulty": "very_hard",
      "scaffolding_steps": 11
    },
    {
      "number": 28,
      "act": "Act 8: 종합 응용",
      "title": "드론 배송 경로",
      "concept": "거리 함수",
      "problem_context": "드론 배송 서비스는 2차원 좌표로 배송지를 관리합니다. 물류센터는 원점(0,0)에 있고, 배송지 A(3,4), B(-5,12), C(8,-6)이 있습니다. 드론의 배터리는 왕복 20km까지 가능하며, 속도는 40km/h입니다. 거리는 직선거리로 계산합니다.",
      "data": {
        "물류센터": [0, 0],
        "배송지": {
          "A": [3, 4],
          "B": [-5, 12],
          "C": [8, -6]
        },
        "배터리_한계": 20,
        "속도": 40
      },
      "questions": [
        "a) 각 배송지까지의 거리는?",
        "b) 왕복 가능한 배송지는?",
        "c) 모든 배송 완료 시간은?",
        "d) 가장 효율적인 배송 순서는?"
      ],
      "scaffolding": [
        "Step 1: 거리 = √(x²+y²)",
        "Step 2: A: √(9+16) = √25 = 5km",
        "Step 3: B: √(25+144) = √169 = 13km",
        "Step 4: C: √(64+36) = √100 = 10km",
        "Step 5: 왕복 거리: A(10km), B(26km), C(20km)",
        "Step 6: 배터리 한계 20km",
        "Step 7: 가능: A, C / 불가능: B",
        "Step 8: 시간 = 거리/속도",
        "Step 9: A: 10/40 = 0.25시간 = 15분",
        "Step 10: C: 20/40 = 0.5시간 = 30분",
        "Step 11: 효율적 순서: A → C (거리 순)"
      ],
      "answer": {
        "a": "A: 5km, B: 13km, C: 10km",
        "b": "A, C (B는 왕복 26km로 불가능)",
        "c": "A: 15분, C: 30분, 총 45분",
        "d": "A → C (가까운 곳부터)"
      },
      "difficulty": "very_hard",
      "scaffolding_steps": 11
    },
    {
      "number": 29,
      "act": "Act 8: 종합 응용",
      "title": "인구 성장 모델",
      "concept": "로지스틱 성장",
      "problem_context": "도시 계획가는 신도시 인구 성장을 예측합니다. 초기 인구 10,000명, 연간 성장률 5%, 수용 한계 100,000명입니다. 로지스틱 모델에 따르면 인구가 한계에 가까워질수록 성장이 둔화됩니다. 도시는 인구 50,000명 시점에 추가 인프라를 건설할 계획입니다.",
      "data": {
        "초기_인구": 10000,
        "성장률": 0.05,
        "수용_한계": 100000,
        "인프라_기준": 50000,
        "관찰_년도": [0, 5, 10, 15, 20]
      },
      "questions": [
        "a) 단순 지수 성장 시 5년 후 인구는?",
        "b) 로지스틱 모델의 특징은?",
        "c) 인프라 건설 예상 시기는?",
        "d) 수용 한계의 90% 도달 시기는?"
      ],
      "scaffolding": [
        "Step 1: 지수: P = 10,000 × (1.05)^5",
        "Step 2: (1.05)^5 ≈ 1.276",
        "Step 3: = 12,760명",
        "Step 4: 로지스틱: 초기 빠름, 후기 느림",
        "Step 5: S자 곡선 형태",
        "Step 6: 50,000명 = 중간점",
        "Step 7: 단순 계산: 10,000 × (1.05)^t = 50,000",
        "Step 8: (1.05)^t = 5",
        "Step 9: t × log(1.05) = log(5)",
        "Step 10: t ≈ 32.9년",
        "Step 11: 90% = 90,000명, 약 50-60년"
      ],
      "answer": {
        "a": "약 12,760명",
        "b": "S자 곡선, 초기 지수적, 후기 포화",
        "c": "약 33년",
        "d": "약 50-60년"
      },
      "difficulty": "very_hard",
      "scaffolding_steps": 11
    },
    {
      "number": 30,
      "act": "Act 8: 종합 응용",
      "title": "AI 학습 효율성",
      "concept": "함수의 종합",
      "problem_context": "AI 모델의 학습 효율은 데이터량과 학습 시간에 따라 결정됩니다. 정확도 = 100(1-e^(-0.001×데이터량))×(1-e^(-0.1×시간))입니다. 현재 10,000개 데이터로 20시간 학습했을 때 정확도는 86.5%입니다. 목표는 95% 정확도이며, 데이터 수집 비용은 개당 100원, 학습 시간 비용은 시간당 10,000원입니다.",
      "data": {
        "정확도_함수": "A = 100(1-e^(-0.001D))(1-e^(-0.1T))",
        "현재_데이터": 10000,
        "현재_시간": 20,
        "현재_정확도": 86.5,
        "목표_정확도": 95,
        "데이터_비용": 100,
        "시간_비용": 10000
      },
      "questions": [
        "a) 현재 설정의 이론적 정확도는?",
        "b) 데이터만 2배로 늘리면?",
        "c) 시간만 2배로 늘리면?",
        "d) 목표 달성을 위한 최적 조합은?"
      ],
      "scaffolding": [
        "Step 1: D=10,000, T=20 대입",
        "Step 2: 1-e^(-10) ≈ 0.99995",
        "Step 3: 1-e^(-2) ≈ 0.865",
        "Step 4: A = 100 × 0.99995 × 0.865",
        "Step 5: ≈ 86.5% (확인됨)",
        "Step 6: D=20,000: 1-e^(-20) ≈ 1",
        "Step 7: A = 100 × 1 × 0.865 = 86.5%",
        "Step 8: T=40: 1-e^(-4) ≈ 0.982",
        "Step 9: A = 100 × 0.99995 × 0.982 = 98.2%",
        "Step 10: 시간 증가가 효과적",
        "Step 11: T=30이면 A≈95% (최적)"
      ],
      "answer": {
        "a": "86.5% (계산 확인)",
        "b": "여전히 86.5% (데이터 포화)",
        "c": "98.2%",
        "d": "학습 시간 30시간 (추가 10시간, 비용 100,000원)"
      },
      "difficulty": "very_hard",
      "scaffolding_steps": 11
    }
  ]
}